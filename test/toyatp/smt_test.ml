open OUnit2
open Z3
open Toyatp.Smt

(** SatExample test. *)
let test_sat_example _ =
  let open SatExample in
  (* Kontrollime OCaml-i arvutustega, kas leitud vÃ¤Ã¤rtustus tÃµesti muutab need kolm vÃµrrandit tÃµesteks. *)
  (* Kuna sobivaid vÃ¤Ã¤rtustusi vÃµib Ã¼ldiselt olla mitu,
     siis me ei kontrolli muutujate vÃ¤Ã¤rtusi (ehk vÃ¤Ã¤rtustust) otse,
     vaid lihtsalt kontrollime nÃµutud vÃµrrandeid. *)
  assert_bool "ðŸŸ¢ + ðŸŸ¢ = 10" (circle + circle = 10);
  assert_bool "ðŸŸ¢*ðŸŸ¨ + ðŸŸ¨ = 12" (circle * square + square = 12);
  assert_bool "ðŸŸ¢*ðŸŸ¨ - ðŸ”º*ðŸŸ¢ = ðŸŸ¢" (circle * square - triangle * circle = circle)

(** ProofExample test. *)
let test_proof_example _ =
  (* TÃµestuse korral mingit vÃ¤Ã¤rtustust pole, seega saame kontrollida ainult Z3 tulemust.
     Seega peame ise veenduma, et tÃµestasime Ãµiget asja,
     st teisendasime implikatsiooni korrektselt Z3 avaldiseks. *)
  assert_equal ~printer:Solver.string_of_status UNSATISFIABLE ProofExample.status

let tests =
  "smt" >::: [
    "sat_example" >:: test_sat_example;
    "proof_example" >:: test_proof_example;
  ]

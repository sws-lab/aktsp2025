(** Kehtestatavuse √ºlesanded koos teooriatega ehk SMT.

    SMT √ºlesanded on SAT √ºlesannete √ºldistused,
    kus lisaks t√µev√§√§rtustele saab kasutada ka muid andmet√º√ºpe.
    N√§iteks:
    1. t√§isarvud (piiramata suurusega, a la BigInt),
    2. reaalarvud (piiramata suurusega, a la BigDecimal),
    3. fikseeritud pikkused bitivektorid (ehk t√§isarvude piiratud suurusega esitused arvutites),
    4. IEEE ujukomaarvud (ehk reaalarvude piiratud suurusega esitused arvutites),
    5. massiivid,
    6. s√µned,
    7. regulaaravaldised,
    8. jne.

    Nende erinevate andmet√º√ºpidega arutlemiseks kasutatakse vastavaid "teooriaid",
    mist√µttu SMT = SAT + teooria.
    Kuigi igasuguseid "raskeid" √ºlesandeid saab taandada SAT √ºlesanneteks,
    siis see v√µib olla t√ºlikas ja ebaefektiivne.
    T√§iendavate teooriate kasutamine v√µimaldab reaalseid √ºlesandeid lihtsamini spetsifitseerida ja efektiivsemalt lahendada.

    Vt. https://en.wikipedia.org/wiki/Satisfiability_modulo_theories. *)

(** Meie kasutatav Z3 solver ongi tegelikult SMT lahendaja. *)
open Z3

let ctx = mk_context [
    ("model", "true");
  ]
let solver = Solver.mk_simple_solver ctx

(** Abifunktsioon Z3 avaldise OCaml-i t√§isarvuks teisendamiseks.
    Vaja SatExample-is mudelist v√§√§rtuste k√§tte saamiseks. *)
let int_of_expr e =
  Z.to_int (Arithmetic.Integer.get_big_int e)

(** Olgu meil t√§isarvulised muutujad üü¢, üü® ja üî∫.
    Olgu meil v√µrrandis√ºsteem Facebook-ist:
    1. üü¢ + üü¢ = 10,
    2. üü¢*üü® + üü® = 12,
    3. üü¢*üü® - üî∫*üü¢ = üü¢.

    Lahendada see v√µrrandis√ºsteem.
    St, leida muutujate v√§√§rtustus, mille korral k√µik kolm v√µrrandit on t√µesed.*)
module SatExample =
struct
  let (circle, square, triangle) =
    (* Loome t√§isarvu t√º√ºpi Z3 muutujad. *)
    let circle = Arithmetic.Integer.mk_const_s ctx "circle" in
    let square = Arithmetic.Integer.mk_const_s ctx "square" in
    let triangle = Arithmetic.Integer.mk_const_s ctx "triangle" in

    (* Loome Z3 avaldised nende kolme v√µrrandi jaoks. *)
    (* V√µrrandid ise on v√µrdused (mk_eq), mille v√§√§rtus on t√µev√§√§rtus,
       kuid v√µrduste pooltes on t√§isarvulist t√º√ºpi avaldised moodulist Arithmetic.
       Pane t√§hele, et kasutame kahte uut moodulit:
       1. Arithmetic, mis sisaldab √ºldiseid aritmeetilisi operatsioone;
       2. Arithmetic.Integer, mis sisaldab t√§isarvulise aritmeetika operatsioone.
       Jaotus on selline, sest Z3 v√µimaldab ka t√∂√∂tada reaalarvudega (moodul Arithmetic.Real). *)
    let c1 = Boolean.mk_eq ctx (Arithmetic.mk_add ctx [circle; circle]) (Arithmetic.Integer.mk_numeral_i ctx 10) in
    let c2 = Boolean.mk_eq ctx (Arithmetic.mk_add ctx [Arithmetic.mk_mul ctx [circle; square]; square]) (Arithmetic.Integer.mk_numeral_i ctx 12) in
    let c3 = Boolean.mk_eq ctx (Arithmetic.mk_sub ctx [Arithmetic.mk_mul ctx [circle; square]; Arithmetic.mk_mul ctx [triangle; circle]]) circle in

    (* K√§ivitame Z3 solveri kolmele v√µrrandile vastavate avaldistega.
       Z3 lahendab SMT √ºlesande. *)
    let status = Solver.check solver [c1; c2; c3] in
    assert (status = SATISFIABLE); (* Siin n√§ites peaks olema kehtestatav. *)

    let model = Option.get (Solver.get_model solver) in
    (* √ïngitseme mudelist v√§lja meie kolme Z3 muutuja v√§√§rtused OCaml-i t√§isarvudena. *)
    let int_of_model x = int_of_expr (Option.get (Model.get_const_interp_e model x)) in
    let circle' = int_of_model circle in
    let square' = int_of_model square in
    let triangle' = int_of_model triangle in
    (* Tagastame testi jaoks kolm t√µev√§√§rtust. *)
    (circle', square', triangle')
end

(** Olgu meil t√§isarvuline muutuja x.
    T√µestada,
      kui x > 2,
      siis x * 2 > x + 2. *)
module ProofExample =
struct
  let status =
    (* Loome t√§isarvu t√º√ºpi Z3 muutuja. *)
    let x = Arithmetic.Integer.mk_const_s ctx "x" in

    (* Loome Z3 avaldised implikatsiooni vasaku ja parema poole jaoks. *)
    let two = Arithmetic.Integer.mk_numeral_i ctx 2 in (* Abidefinitsioon Z3 t√§isarvulise konstandi 2 jaoks. *)
    let lhs = Arithmetic.mk_gt ctx x two in (* mk_gt vastab v√µrdlusele >. *)
    let rhs = Arithmetic.mk_gt ctx (Arithmetic.mk_mul ctx [x; two]) (Arithmetic.mk_add ctx [x; two]) in

    (* Loome Z3 avaldise implikatsiooni enda jaoks. *)
    let c = Boolean.mk_implies ctx lhs rhs in

    (* Loome Z3 avaldise implikatsiooni eituse jaoks, sest tahame t√µestada. *)
    let c' = Boolean.mk_not ctx c in
    (* Ja k√§ivitame Z3 solveri, et kontrollida, kas eitus on kehtestatav. *)
    let status = Solver.check solver [c'] in
    (* Siin n√§ites peaks tulemus olema UNSATISFIABLE,
       mis t√§hendab, et implikatsioon kehtib. *)
    (* Tagastame solveri tulemuse testi jaoks.
       Kui tulemus on mitte-kehtestatav, siis Z3 mingit mudelit anda ei saa. *)
    status
end
